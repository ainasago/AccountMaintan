@page
@model WebUI.Pages.Admin.Users.IndexModel
@{
    ViewData["Title"] = "用户管理";
}

<div class="container-fluid">
    <!-- 页面标题和操作按钮 -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <h1 class="h3 mb-0">
                    <i class="fas fa-users me-2"></i>用户管理
                </h1>
                <div>
                    <button class="btn btn-primary me-2" data-bs-toggle="modal" data-bs-target="#addUserModal">
                        <i class="fas fa-plus me-1"></i>添加用户
                    </button>
                    <a asp-page="/Admin/Settings" class="btn btn-outline-secondary">
                        <i class="fas fa-cog me-1"></i>系统设置
                    </a>
                </div>
            </div>
        </div>
    </div>

    <!-- 用户列表 -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover" id="usersTable">
                            <thead>
                                <tr>
                                    <th>显示名称</th>
                                    <th>邮箱</th>
                                    <th>角色</th>
                                    <th>状态</th>
                                    <th>创建时间</th>
                                    <th>最后登录</th>
                                    <th>操作</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var user in Model.Users)
                                {
                                    <tr>
                                        <td>@user.DisplayName</td>
                                        <td>@user.Email</td>
                                        <td>
                                            @if (user.IsSuperAdmin)
                                            {
                                                <span class="badge bg-danger">超级管理员</span>
                                            }
                                            else if (user.IsAdmin)
                                            {
                                                <span class="badge bg-warning">管理员</span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-secondary">普通用户</span>
                                            }
                                        </td>
                                        <td>
                                            @if (user.IsEnabled)
                                            {
                                                <span class="badge bg-success">启用</span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-danger">禁用</span>
                                            }
                                        </td>
                                        <td>@user.CreatedAt.ToString("yyyy-MM-dd HH:mm")</td>
                                        <td>@(user.LastLoginAt?.ToString("yyyy-MM-dd HH:mm") ?? "从未登录")</td>
                                        <td>
                                            <div class="btn-group" role="group">
                                                @if (!user.IsSuperAdmin)
                                                {
                                                    <button class="btn btn-sm btn-outline-primary" onclick="editUser('@user.Id')">
                                                        <i class="fas fa-edit"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-@(user.IsEnabled ? "warning" : "success")" 
                                                            onclick="toggleUserStatus('@user.Id', @user.IsEnabled.ToString().ToLower())">
                                                        <i class="fas fa-@(user.IsEnabled ? "ban" : "check")"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-@(user.IsAdmin ? "secondary" : "info")" 
                                                            onclick="toggleAdminStatus('@user.Id', @user.IsAdmin.ToString().ToLower())">
                                                        <i class="fas fa-user-@(user.IsAdmin ? "minus" : "plus")"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-danger" onclick="deleteUser('@user.Id')">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">超级管理员</span>
                                                }
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- 添加用户模态框 -->
<div class="modal fade" id="addUserModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">添加用户</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="addUserForm">
                <div class="modal-body">
                    <input type="hidden" id="currentEditUserId" value="" />
                    <div class="mb-3">
                        <label for="displayName" class="form-label">显示名称</label>
                        <input type="text" class="form-control" id="displayName" name="displayName" required>
                    </div>
                    <div class="mb-3">
                        <label for="email" class="form-label">邮箱</label>
                        <input type="email" class="form-control" id="email" name="email" required>
                    </div>
                    <div class="mb-3">
                        <label for="password" class="form-label">密码</label>
                        <input type="password" class="form-control" id="password" name="password" required>
                        <div class="form-text">
                            <small class="text-muted">
                                密码要求：至少12个字符，包含大小写字母、数字和特殊字符，不能包含用户名或常见模式
                            </small>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label for="confirmPassword" class="form-label">确认密码</label>
                        <input type="password" class="form-control" id="confirmPassword" name="confirmPassword" required>
                    </div>
                    <div class="mb-3">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="isAdmin" name="isAdmin">
                            <label class="form-check-label" for="isAdmin">
                                设为管理员
                            </label>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">取消</button>
                    <button type="submit" id="submitUserBtn" class="btn btn-primary">添加</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.13.7/css/dataTables.bootstrap5.min.css">
    <script type="text/javascript" src="https://cdn.datatables.net/1.13.7/js/jquery.dataTables.min.js"></script>
    <script type="text/javascript" src="https://cdn.datatables.net/1.13.7/js/dataTables.bootstrap5.min.js"></script>
    <script>
        // 等待jQuery加载完成
        function waitForJQuery() {
            if (typeof $ !== 'undefined') {
                initializePage();
            } else {
                setTimeout(waitForJQuery, 100);
            }
        }

        // 全局变量
        let csrfToken = null;
        let passwordEncryptionToken = null;

        // 初始化CSRF令牌
        async function initializeCsrfToken() {
            try {
                console.log('正在获取CSRF令牌...');
                const response = await fetch('/api/admin/csrf-token', {
                    method: 'GET',
                    credentials: 'include'
                });
                
                console.log('CSRF令牌响应状态:', response.status);
                
                if (response.ok) {
                    const data = await response.json();
                    console.log('CSRF令牌响应数据:', data);
                    if (data.success) {
                        csrfToken = data.token;
                        console.log('CSRF令牌已获取:', csrfToken.substring(0, 8) + '...');
                    } else {
                        console.error('CSRF令牌获取失败:', data.message);
                    }
                } else {
                    console.error('CSRF令牌请求失败:', response.status, response.statusText);
                }
            } catch (error) {
                console.error('获取CSRF令牌失败:', error);
            }
        }

        // 获取CSRF令牌（如果不存在则重新获取）
        async function getCsrfToken() {
            if (!csrfToken) {
                await initializeCsrfToken();
            }
            return csrfToken;
        }

        // 初始化密码加密令牌
        async function initializePasswordEncryptionToken() {
            try {
                console.log('正在获取密码加密令牌...');
                const response = await fetch('/api/admin/password-encryption-token', {
                    method: 'GET',
                    credentials: 'include'
                });
                
                console.log('密码加密令牌响应状态:', response.status);
                
                if (response.ok) {
                    const data = await response.json();
                    console.log('密码加密令牌响应数据:', data);
                    if (data.success) {
                        passwordEncryptionToken = data.token;
                        console.log('密码加密令牌已获取:', passwordEncryptionToken.substring(0, 8) + '...');
                    } else {
                        console.error('密码加密令牌获取失败:', data.message);
                    }
                } else {
                    console.error('密码加密令牌请求失败:', response.status, response.statusText);
                }
            } catch (error) {
                console.error('获取密码加密令牌失败:', error);
            }
        }

        // 获取密码加密令牌（如果不存在则重新获取）
        async function getPasswordEncryptionToken() {
            if (!passwordEncryptionToken) {
                await initializePasswordEncryptionToken();
            }
            return passwordEncryptionToken;
        }

        // 密码加密函数（与后端保持一致）
        async function encryptPassword(password, token) {
            try {
                // 将密码和令牌组合
                const combinedData = password + ':' + token;
                
                // 使用Web Crypto API进行AES-CBC加密
                const encoder = new TextEncoder();
                const data = encoder.encode(combinedData);
                
                // 使用固定的加密密钥（与后端保持一致）
                const keyString = 'AccountManagerPasswordEncryptionKey2024!';
                const keyData = await crypto.subtle.digest('SHA-256', encoder.encode(keyString));
                const key = await crypto.subtle.importKey(
                    'raw',
                    keyData,
                    { name: 'AES-CBC' },
                    false,
                    ['encrypt']
                );
                
                // 生成随机IV（AES-CBC需要16字节IV）
                const iv = crypto.getRandomValues(new Uint8Array(16));
                
                // 加密数据
                const encryptedData = await crypto.subtle.encrypt(
                    { name: 'AES-CBC', iv: iv },
                    key,
                    data
                );
                
                // 将IV和加密数据组合并转换为Base64
                const combined = new Uint8Array(iv.length + encryptedData.byteLength);
                combined.set(iv);
                combined.set(new Uint8Array(encryptedData), iv.length);
                
                return btoa(String.fromCharCode(...combined));
            } catch (error) {
                console.error('密码加密失败:', error);
                throw new Error('密码加密失败');
            }
        }

        // 页面初始化
        function initializePage() {
            // 初始化CSRF令牌
            initializeCsrfToken();
            
            // 初始化密码加密令牌
            initializePasswordEncryptionToken();

            $('#usersTable').DataTable({
                language: {
                    url: '//cdn.datatables.net/plug-ins/1.13.7/i18n/zh.json'
                },
                pageLength: 25,
                order: [[4, 'desc']]
            });

            // 密码强度验证
            function validatePassword(password) {
                const errors = [];
                
                if (password.length < 12) {
                    errors.push('密码长度至少需要12个字符');
                }
                
                if (!/[a-z]/.test(password)) {
                    errors.push('密码必须包含至少一个小写字母');
                }
                
                if (!/[A-Z]/.test(password)) {
                    errors.push('密码必须包含至少一个大写字母');
                }
                
                if (!/[0-9]/.test(password)) {
                    errors.push('密码必须包含至少一个数字');
                }
                
                if (!/[^a-zA-Z0-9]/.test(password)) {
                    errors.push('密码必须包含至少一个特殊字符');
                }
                
                // 检查重复字符
                if (/(.)\1{2,}/.test(password)) {
                    errors.push('密码不能包含超过2个连续相同字符');
                }
                
                // 检查常见模式
                const commonPatterns = ['qwerty', 'asdf', 'zxcv', '1234', 'abcd'];
                if (commonPatterns.some(pattern => password.toLowerCase().includes(pattern))) {
                    errors.push('密码不能包含常见的键盘模式');
                }
                
                return errors;
            }

            // 实时密码验证
            $('#password').on('input', function() {
                const password = $(this).val();
                const errors = validatePassword(password);
                let errorContainer = $(this).siblings('.password-errors');
                
                if (errorContainer.length === 0) {
                    $(this).after('<div class="password-errors text-danger small mt-1"></div>');
                    errorContainer = $(this).siblings('.password-errors');
                }
                
                if (errors.length > 0) {
                    errorContainer.html(errors.join('<br>')).show();
                    $(this).addClass('is-invalid');
                } else {
                    errorContainer.hide();
                    $(this).removeClass('is-invalid').addClass('is-valid');
                }
            });

            // 模态框关闭时重置回创建模式
            $('#addUserModal').on('hidden.bs.modal', function () {
                resetUserFormToCreateMode();
            });

            // 添加/编辑 用户表单提交
            $('#addUserForm').on('submit', async function(e) {
                e.preventDefault();
                
                const formData = {
                    displayName: $('#displayName').val(),
                    email: $('#email').val(),
                    password: $('#password').val(),
                    confirmPassword: $('#confirmPassword').val(),
                    isAdmin: $('#isAdmin').is(':checked')
                };

                const isEditMode = $('#addUserModal').data('mode') === 'edit';

                if (!isEditMode || (isEditMode && (formData.password || formData.confirmPassword))) {
                    const passwordErrors = validatePassword(formData.password);
                    if (passwordErrors.length > 0) {
                        alert('密码不符合要求：\n' + passwordErrors.join('\n'));
                        return;
                    }
                    if (formData.password !== formData.confirmPassword) {
                        alert('密码和确认密码不匹配');
                        return;
                    }
                }

                try {
                    const csrfToken = await getCsrfToken();
                    const encryptionToken = await getPasswordEncryptionToken();
                    
                    if (!encryptionToken) {
                        alert('获取密码加密令牌失败，请刷新页面重试');
                        return;
                    }

                    let url = '/api/admin/users';
                    let method = 'POST';
                    let requestData = {};

                    if (isEditMode) {
                        const editingUserId = $('#currentEditUserId').val();
                        url = `/api/admin/users/${editingUserId}`;
                        method = 'PUT';

                        requestData = {
                            displayName: formData.displayName,
                            isAdmin: formData.isAdmin
                        };
                        if (formData.password || formData.confirmPassword) {
                            const encryptedNewPassword = await encryptPassword(formData.password, encryptionToken);
                            const encryptedConfirmPassword = await encryptPassword(formData.confirmPassword, encryptionToken);
                            requestData.encryptedNewPassword = encryptedNewPassword;
                            requestData.encryptedConfirmPassword = encryptedConfirmPassword;
                            requestData.encryptionToken = encryptionToken;
                        }
                    } else {
                        const encryptedPassword = await encryptPassword(formData.password, encryptionToken);
                        const encryptedConfirmPassword = await encryptPassword(formData.confirmPassword, encryptionToken);
                        requestData = {
                            displayName: formData.displayName,
                            email: formData.email,
                            encryptedPassword: encryptedPassword,
                            encryptedConfirmPassword: encryptedConfirmPassword,
                            encryptionToken: encryptionToken,
                            isAdmin: formData.isAdmin
                        };
                    }
                    
                    // 设置jQuery的全局AJAX设置
                    $.ajaxSetup({
                        beforeSend: function(xhr) {
                            if (csrfToken) {
                                xhr.setRequestHeader('X-CSRF-TOKEN', csrfToken);
                            }
                        }
                    });

                    $.ajax({
                        url: url,
                        type: method,
                        contentType: 'application/json',
                        data: JSON.stringify(requestData),
                        success: function(response) {
                            if (response.success) {
                                location.reload();
                            } else {
                                const errorMessage = response.message || '未知错误';
                                alert((isEditMode ? '更新用户失败: ' : '添加用户失败: ') + errorMessage);
                            }
                        },
                        error: function(xhr) {
                            console.error('提交用户失败:', xhr);
                            let errorMessage = isEditMode ? '更新用户时发生错误' : '添加用户时发生错误';
                            
                            if (xhr.status === 403) {
                                errorMessage = 'CSRF令牌验证失败，请刷新页面重试';
                            } else if (xhr.status === 500) {
                                errorMessage = '服务器内部错误，请检查日志';
                            } else if (xhr.responseJSON && xhr.responseJSON.message) {
                                errorMessage = xhr.responseJSON.message;
                            } else if (xhr.responseText) {
                                try {
                                    // 检查响应是否为有效的JSON
                                    const response = JSON.parse(xhr.responseText);
                                    if (response.message) {
                                        errorMessage = response.message;
                                    }
                                } catch (e) {
                                    console.error('JSON解析失败:', e);
                                    console.error('响应内容:', xhr.responseText);
                                    // 如果解析失败，检查是否是HTML错误页面
                                    if (xhr.responseText.includes('<html>') || xhr.responseText.includes('<!DOCTYPE')) {
                                        errorMessage = '服务器返回了HTML页面而不是JSON，可能是服务器错误';
                                    } else {
                                        errorMessage = '服务器响应格式错误: ' + xhr.responseText.substring(0, 100);
                                    }
                                }
                            } else {
                                errorMessage = `HTTP ${xhr.status}: ${xhr.statusText}`;
                            }
                            
                            alert((isEditMode ? '更新用户失败: ' : '添加用户失败: ') + errorMessage);
                        }
                    });
                } catch (error) {
                    console.error('提交用户失败:', error);
                    alert(isEditMode ? '更新用户时发生错误' : '添加用户时发生错误');
                }
            });
        }

        // 进入编辑模式
        async function editUser(userId) {
            try {
                const response = await fetch(`/api/admin/users/${userId}`, { credentials: 'include' });
                if (!response.ok) { alert('获取用户信息失败'); return; }
                const data = await response.json();
                if (!data.success || !data.data) { alert('获取用户信息失败'); return; }
                const user = data.data;

                $('#currentEditUserId').val(user.id);
                $('#displayName').val(user.displayName || '');
                $('#email').val(user.email || '').prop('disabled', true);
                $('#isAdmin').prop('checked', user.isAdmin === true);
                $('#password').val('');
                $('#confirmPassword').val('');

                setUserFormToEditMode();

                var modal = new bootstrap.Modal(document.getElementById('addUserModal'));
                modal.show();
            } catch (e) {
                console.error('编辑用户初始化失败:', e);
                alert('加载用户信息失败');
            }
        }

        function setUserFormToEditMode() {
            $('#addUserModal').data('mode', 'edit');
            $('#addUserModal .modal-title').text('编辑用户');
            $('#submitUserBtn').text('保存');
            $('#password').attr('placeholder', '留空表示不修改');
            $('#confirmPassword').attr('placeholder', '留空表示不修改');
            // 编辑模式下，密码可选：移除required
            $('#password').prop('required', false);
            $('#confirmPassword').prop('required', false);
        }

        function resetUserFormToCreateMode() {
            $('#addUserModal').data('mode', 'create');
            $('#addUserModal .modal-title').text('添加用户');
            $('#submitUserBtn').text('添加');
            $('#currentEditUserId').val('');
            $('#email').prop('disabled', false);
            $('#addUserForm')[0].reset();
            $('#password').attr('placeholder', '');
            $('#confirmPassword').attr('placeholder', '');
            $('.password-errors').hide().text('');
            $('#password').removeClass('is-invalid is-valid');
            // 创建模式下，密码必填：恢复required
            $('#password').prop('required', true);
            $('#confirmPassword').prop('required', true);
        }

        async function toggleUserStatus(userId, isEnabled) {
            const action = isEnabled ? '禁用' : '启用';
            if (confirm(`确定要${action}该用户吗？`)) {
                try {
                    const token = await getCsrfToken();
                    
                    // 设置jQuery的全局AJAX设置
                    $.ajaxSetup({
                        beforeSend: function(xhr) {
                            if (token) {
                                xhr.setRequestHeader('X-CSRF-TOKEN', token);
                            }
                        }
                    });

                    $.ajax({
                        url: `/api/admin/users/${userId}/toggle-status`,
                        type: 'POST',
                        success: function(response) {
                            if (response.success) {
                                location.reload();
                            } else {
                                alert(response.message);
                            }
                        },
                        error: function(xhr) {
                            if (xhr.status === 403) {
                                alert('CSRF令牌验证失败，请刷新页面重试');
                            } else {
                                alert('操作失败');
                            }
                        }
                    });
                } catch (error) {
                    console.error('切换用户状态失败:', error);
                    alert('操作失败');
                }
            }
        }

        async function toggleAdminStatus(userId, isAdmin) {
            const action = isAdmin ? '撤销管理员权限' : '授予管理员权限';
            if (confirm(`确定要${action}吗？`)) {
                try {
                    const token = await getCsrfToken();
                    
                    // 设置jQuery的全局AJAX设置
                    $.ajaxSetup({
                        beforeSend: function(xhr) {
                            if (token) {
                                xhr.setRequestHeader('X-CSRF-TOKEN', token);
                            }
                        }
                    });

                    $.ajax({
                        url: `/api/admin/users/${userId}/toggle-admin`,
                        type: 'POST',
                        success: function(response) {
                            if (response.success) {
                                location.reload();
                            } else {
                                alert(response.message);
                            }
                        },
                        error: function(xhr) {
                            if (xhr.status === 403) {
                                alert('CSRF令牌验证失败，请刷新页面重试');
                            } else {
                                alert('操作失败');
                            }
                        }
                    });
                } catch (error) {
                    console.error('切换管理员状态失败:', error);
                    alert('操作失败');
                }
            }
        }

        async function deleteUser(userId) {
            if (confirm('确定要删除该用户吗？此操作不可恢复！')) {
                try {
                    const token = await getCsrfToken();
                    
                    // 设置jQuery的全局AJAX设置
                    $.ajaxSetup({
                        beforeSend: function(xhr) {
                            if (token) {
                                xhr.setRequestHeader('X-CSRF-TOKEN', token);
                            }
                        }
                    });

                    $.ajax({
                        url: `/api/admin/users/${userId}`,
                        type: 'DELETE',
                        success: function(response) {
                            if (response.success) {
                                location.reload();
                            } else {
                                alert(response.message);
                            }
                        },
                        error: function(xhr) {
                            if (xhr.status === 403) {
                                alert('CSRF令牌验证失败，请刷新页面重试');
                            } else {
                                alert('删除失败');
                            }
                        }
                    });
                } catch (error) {
                    console.error('删除用户失败:', error);
                    alert('删除失败');
                }
            }
        }

        // 启动页面初始化
        waitForJQuery();
    </script>
}
