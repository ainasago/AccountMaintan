@page
@model WebUI.Pages.Account.ChangePasswordModel
@{
    ViewData["Title"] = "修改账户信息";
}

<h2 class="mb-4">修改账户信息</h2>

@if (TempData["StatusMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @TempData["StatusMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<div class="row">
    <div class="col-md-6 col-lg-5">
        <form method="post" id="changePasswordForm">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            
            <!-- 隐藏的加密令牌字段 -->
            <input type="hidden" id="encryptionToken" name="EncryptionToken" value="@ViewData["PasswordEncryptionToken"]" />

            <div class="mb-3">
                <label asp-for="Input.Email" class="form-label"></label>
                <input asp-for="Input.Email" class="form-control" type="email" />
                <span asp-validation-for="Input.Email" class="text-danger"></span>
            </div>

            <div class="mb-3">
                <label asp-for="Input.CurrentPassword" class="form-label"></label>
                <input asp-for="Input.CurrentPassword" class="form-control" id="currentPassword" />
                <span asp-validation-for="Input.CurrentPassword" class="text-danger"></span>
                <small class="form-text text-muted">仅在修改密码时需要输入当前密码</small>
            </div>

            <div class="mb-3">
                <label asp-for="Input.NewPassword" class="form-label"></label>
                <input asp-for="Input.NewPassword" class="form-control" id="newPassword" />
                <span asp-validation-for="Input.NewPassword" class="text-danger"></span>
                <small class="form-text text-muted">留空表示不修改密码。密码要求：至少12个字符，包含大小写字母、数字和特殊字符</small>
            </div>

            <div class="mb-3">
                <label asp-for="Input.ConfirmPassword" class="form-label"></label>
                <input asp-for="Input.ConfirmPassword" class="form-control" id="confirmPassword" />
                <span asp-validation-for="Input.ConfirmPassword" class="text-danger"></span>
            </div>

            <button type="submit" class="btn btn-primary">
                <i class="fas fa-save me-1"></i>保存
            </button>
        </form>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        // 密码加密函数（与前端保持一致）
        async function encryptPassword(password, token) {
            try {
                // 将密码和令牌组合
                const combinedData = password + ':' + token;
                
                // 使用Web Crypto API进行AES-CBC加密
                const encoder = new TextEncoder();
                const data = encoder.encode(combinedData);
                
                // 使用固定的加密密钥（与后端保持一致）
                const keyString = 'AccountManagerPasswordEncryptionKey2024!';
                const keyData = await crypto.subtle.digest('SHA-256', encoder.encode(keyString));
                const key = await crypto.subtle.importKey(
                    'raw',
                    keyData,
                    { name: 'AES-CBC' },
                    false,
                    ['encrypt']
                );
                
                // 生成随机IV（AES-CBC需要16字节IV）
                const iv = crypto.getRandomValues(new Uint8Array(16));
                
                // 加密数据
                const encryptedData = await crypto.subtle.encrypt(
                    { name: 'AES-CBC', iv: iv },
                    key,
                    data
                );
                
                // 将IV和加密数据组合并转换为Base64
                const combined = new Uint8Array(iv.length + encryptedData.byteLength);
                combined.set(iv);
                combined.set(new Uint8Array(encryptedData), iv.length);
                
                return btoa(String.fromCharCode(...combined));
            } catch (error) {
                console.error('密码加密失败:', error);
                throw new Error('密码加密失败');
            }
        }

        // 表单提交处理
        document.getElementById('changePasswordForm').addEventListener('submit', async function(e) {
            const newPassword = document.getElementById('newPassword').value;
            const currentPassword = document.getElementById('currentPassword').value;
            const confirmPassword = document.getElementById('confirmPassword').value;
            const encryptionToken = document.getElementById('encryptionToken').value;
            
            // 如果没有输入新密码，直接提交（不修改密码）
            if (!newPassword) {
                return;
            }
            
            // 检查是否有加密令牌
            if (!encryptionToken) {
                e.preventDefault();
                alert('密码加密令牌缺失，请刷新页面重试');
                return;
            }
            
            // 如果要修改密码，需要加密
            if (newPassword) {
                e.preventDefault();
                
                try {
                    // 加密当前密码、新密码和确认密码
                    const encryptedCurrentPassword = await encryptPassword(currentPassword, encryptionToken);
                    const encryptedNewPassword = await encryptPassword(newPassword, encryptionToken);
                    const encryptedConfirmPassword = await encryptPassword(confirmPassword, encryptionToken);
                    
                    // 更新表单字段值
                    document.getElementById('currentPassword').value = encryptedCurrentPassword;
                    document.getElementById('newPassword').value = encryptedNewPassword;
                    document.getElementById('confirmPassword').value = encryptedConfirmPassword;
                    
                    // 重新提交表单
                    this.submit();
                } catch (error) {
                    alert('密码加密失败，请重试');
                    console.error('密码加密错误:', error);
                }
            }
        });
    </script>
}


